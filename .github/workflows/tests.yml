name: rsnd
on:
  push:
    branches:
      - main
  pull_request:
jobs:
  build:
    runs-on: buildjet-4vcpu-ubuntu-2204
    outputs:
      cache-hit: ${{ steps.pnpm-cache.outputs.cache-hit }}
    container:
      image: node:22
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable Corepack
        id: pnpm-setup
        run: |
          corepack enable
          corepack prepare pnpm@9.15.0 --activate
          pnpm config set script-shell "/usr/bin/bash"

      - name: pnpm Cache
        uses: buildjet/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install packages
        if: steps.pnpm-cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: turborepo Cache
        uses: buildjet/cache@v4
        with:
          path: |
            .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run Build
        run: pnpm build

  lint:
    runs-on: buildjet-4vcpu-ubuntu-2204
    needs: [build]
    container:
      image: node:22
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.15.0 --activate

      - name: Restore dependencies
        uses: buildjet/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: turborepo Cache
        uses: buildjet/cache@v4
        with:
          path: |
            .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run Build
        run: pnpm build

      - name: Run Lint
        run: pnpm lint

  test:
    runs-on: buildjet-4vcpu-ubuntu-2204
    needs: [build]
    container:
      image: node:22
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.15.0 --activate

      - name: Restore dependencies
        uses: buildjet/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: turborepo Cache
        uses: buildjet/cache@v4
        with:
          path: |
            .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run Tests
        run: pnpm test
        env:
          SPAM_ASSASSIN_HOST: ${{ secrets.SPAM_ASSASSIN_HOST }}
          SPAM_ASSASSIN_PORT: ${{ secrets.SPAM_ASSASSIN_PORT }}

  dependencies:
    runs-on: buildjet-4vcpu-ubuntu-2204
    container:
      image: node:22
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for pinned dependencies
        run: |
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
            const errors = [];

            function isPinned(version) {
              if (version.startsWith("workspace:")) {
                return true;
              }
              if (version.startsWith("npm:")) {
                return true;
              }
              return /^\d+\.\d+\.\d+$|^[a-z]+:[a-z]+@\d+$/.test(version);
            }

            for (const [dep, version] of Object.entries(pkg.dependencies || {})) {
              if (!isPinned(version)) {
                errors.push(`Dependency "${dep}" is not pinned: "${version}"`);
              }
            }

            for (const [dep, version] of Object.entries(pkg.devDependencies || {})) {
              if (!isPinned(version)) {
                errors.push(`Dev dependency "${dep}" is not pinned: "${version}"`);
              }
            }

            if (errors.length > 0) {
              console.error(`\n${errors.join("\n")}\n`);
              process.exit(1);
            } else {
              console.log("All dependencies are pinned.");
            }
          '
